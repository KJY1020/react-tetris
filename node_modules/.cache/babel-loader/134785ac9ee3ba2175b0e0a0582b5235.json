{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\82104\\\\Desktop\\\\school\\\\web_programming\\\\07\\\\05\\\\react-tetris\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\82104\\\\Desktop\\\\school\\\\web_programming\\\\07\\\\05\\\\react-tetris\\\\src\\\\components\\\\Tetris.js\";\nimport React, { useState } from \"react\";\nimport { createStage, checkCollision } from \"../gameHelpers\"; // Components\n\nimport Stage from \"./Stage\";\nimport Display from \"./Display\";\nimport StartButton from \"./StartButton\"; // Styled Components\n\nimport { StyledTetris, StyledTetrisWrapper } from \"./styled/StyledTetris\"; //  Custom Hooks\n\nimport { useInterval } from \"../hooks/useInterval\";\nimport { usePlayer } from \"../hooks/usePlayer\";\nimport { useStage } from \"../hooks/useStage\";\nimport { useGameStatus } from \"../hooks/userGameStatus\";\n\nconst Tetris = () => {\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        dropTime = _useState2[0],\n        setDropTime = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        gameOver = _useState4[0],\n        setGameOver = _useState4[1];\n\n  const _usePlayer = usePlayer(),\n        _usePlayer2 = _slicedToArray(_usePlayer, 4),\n        player = _usePlayer2[0],\n        updatePlayerPos = _usePlayer2[1],\n        resetPlayer = _usePlayer2[2],\n        playerRotate = _usePlayer2[3];\n\n  const _useStage = useStage(player, resetPlayer),\n        _useStage2 = _slicedToArray(_useStage, 3),\n        stage = _useStage2[0],\n        setStage = _useStage2[1],\n        rowsCleared = _useStage2[2];\n\n  const _useGameStatus = useGameStatus(rowsCleared),\n        _useGameStatus2 = _slicedToArray(_useGameStatus, 6),\n        score = _useGameStatus2[0],\n        setScore = _useGameStatus2[1],\n        rows = _useGameStatus2[2],\n        setRows = _useGameStatus2[3],\n        level = _useGameStatus2[4],\n        setLevel = _useGameStatus2[5];\n\n  const movePlayer = dir => {\n    if (!checkCollision(player, stage, {\n      x: dir,\n      y: 0\n    })) {\n      updatePlayerPos({\n        x: dir,\n        y: 0\n      });\n    }\n  };\n\n  const startGame = () => {\n    // Reset everything\n    setStage(createStage());\n    resetPlayer();\n    setGameOver(false);\n    setDropTime(1000);\n    setScore(0);\n    setLevel(0);\n    setRows(0);\n  };\n\n  const drop = () => {\n    // Increase level when player has cleared 10 rows\n    if (rows > (level + 1) * 10) {\n      setLevel(prev => prev + 1); // Also increase speed\n\n      setDropTime(1000 / (level + 1) + 200);\n    }\n\n    if (!checkCollision(player, stage, {\n      x: 0,\n      y: 1\n    })) {\n      updatePlayerPos({\n        x: 0,\n        y: 1,\n        collided: false\n      });\n    } else {\n      if (player.pos.y < 1) {\n        setGameOver(true);\n        setDropTime(null);\n      }\n\n      updatePlayerPos({\n        x: 0,\n        y: 0,\n        collided: true\n      });\n    }\n  };\n\n  const keyUp = ({\n    keyCode\n  }) => {\n    if (!gameOver) {\n      if (keyCode === 40) {\n        setDropTime(1000);\n      }\n    }\n  };\n\n  const dropPlayer = () => {\n    setDropTime(null);\n    drop();\n  };\n\n  const move = ({\n    keyCode\n  }) => {\n    if (!gameOver) {\n      if (keyCode === 37) {\n        movePlayer(-1);\n      } else if (keyCode === 39) {\n        movePlayer(1);\n      } else if (keyCode === 40) {\n        dropPlayer();\n      } else if (keyCode === 38) {\n        playerRotate(stage, 1);\n      }\n    }\n  };\n\n  useInterval(() => {\n    drop();\n  }, dropTime);\n  return React.createElement(StyledTetrisWrapper, {\n    role: \"button\",\n    tabIndex: \"0\",\n    onKeyDown: e => move(e),\n    onKeyUp: keyUp,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, React.createElement(StyledTetris, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, React.createElement(Stage, {\n    stage: stage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }), React.createElement(\"aside\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, gameOver ? React.createElement(Display, {\n    gameOver: gameOver,\n    text: \"Game Over\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }) : React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, React.createElement(Display, {\n    text: \"Score: \".concat(score),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }), React.createElement(Display, {\n    text: \"Rows: \".concat(rows),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }), React.createElement(Display, {\n    text: \"Level: \".concat(level),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  })), React.createElement(StartButton, {\n    callback: startGame,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }))));\n};\n\nexport default Tetris;","map":{"version":3,"sources":["C:/Users/82104/Desktop/school/web_programming/07/05/react-tetris/src/components/Tetris.js"],"names":["React","useState","createStage","checkCollision","Stage","Display","StartButton","StyledTetris","StyledTetrisWrapper","useInterval","usePlayer","useStage","useGameStatus","Tetris","dropTime","setDropTime","gameOver","setGameOver","player","updatePlayerPos","resetPlayer","playerRotate","stage","setStage","rowsCleared","score","setScore","rows","setRows","level","setLevel","movePlayer","dir","x","y","startGame","drop","prev","collided","pos","keyUp","keyCode","dropPlayer","move","e"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nimport { createStage, checkCollision } from \"../gameHelpers\";\r\n\r\n// Components\r\nimport Stage from \"./Stage\";\r\nimport Display from \"./Display\";\r\nimport StartButton from \"./StartButton\";\r\n\r\n// Styled Components\r\nimport { StyledTetris, StyledTetrisWrapper } from \"./styled/StyledTetris\";\r\n\r\n//  Custom Hooks\r\nimport { useInterval } from \"../hooks/useInterval\";\r\nimport { usePlayer } from \"../hooks/usePlayer\";\r\nimport { useStage } from \"../hooks/useStage\";\r\nimport { useGameStatus } from \"../hooks/userGameStatus\";\r\n\r\nconst Tetris = () => {\r\n  const [dropTime, setDropTime] = useState(null);\r\n  const [gameOver, setGameOver] = useState(false);\r\n\r\n  const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\r\n  const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\r\n  const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(\r\n    rowsCleared\r\n  );\r\n\r\n  const movePlayer = dir => {\r\n    if (!checkCollision(player, stage, { x: dir, y: 0 })) {\r\n      updatePlayerPos({ x: dir, y: 0 });\r\n    }\r\n  };\r\n\r\n  const startGame = () => {\r\n    // Reset everything\r\n    setStage(createStage());\r\n    resetPlayer();\r\n    setGameOver(false);\r\n\r\n    setDropTime(1000);\r\n\r\n    setScore(0);\r\n    setLevel(0);\r\n    setRows(0);\r\n  };\r\n\r\n  const drop = () => {\r\n    // Increase level when player has cleared 10 rows\r\n    if (rows > (level + 1) * 10) {\r\n      setLevel(prev => prev + 1);\r\n\r\n      // Also increase speed\r\n      setDropTime(1000 / (level + 1) + 200);\r\n    }\r\n\r\n    if (!checkCollision(player, stage, { x: 0, y: 1 })) {\r\n      updatePlayerPos({ x: 0, y: 1, collided: false });\r\n    } else {\r\n      if (player.pos.y < 1) {\r\n        setGameOver(true);\r\n        setDropTime(null);\r\n      }\r\n      updatePlayerPos({ x: 0, y: 0, collided: true });\r\n    }\r\n  };\r\n\r\n  const keyUp = ({ keyCode }) => {\r\n    if (!gameOver) {\r\n      if (keyCode === 40) {\r\n        setDropTime(1000);\r\n      }\r\n    }\r\n  };\r\n\r\n  const dropPlayer = () => {\r\n    setDropTime(null);\r\n    drop();\r\n  };\r\n\r\n  const move = ({ keyCode }) => {\r\n    if (!gameOver) {\r\n      if (keyCode === 37) {\r\n        movePlayer(-1);\r\n      } else if (keyCode === 39) {\r\n        movePlayer(1);\r\n      } else if (keyCode === 40) {\r\n        dropPlayer();\r\n      } else if (keyCode === 38) {\r\n        playerRotate(stage, 1);\r\n      }\r\n    }\r\n  };\r\n\r\n  useInterval(() => {\r\n    drop();\r\n  }, dropTime);\r\n\r\n  return (\r\n    <StyledTetrisWrapper\r\n      role=\"button\"\r\n      tabIndex=\"0\"\r\n      onKeyDown={e => move(e)}\r\n      onKeyUp={keyUp}\r\n    >\r\n      <StyledTetris>\r\n        <Stage stage={stage} />\r\n\r\n        <aside>\r\n          {gameOver ? (\r\n            <Display gameOver={gameOver} text=\"Game Over\" />\r\n          ) : (\r\n            <div>\r\n              <Display text={`Score: ${score}`} />\r\n              <Display text={`Rows: ${rows}`} />\r\n              <Display text={`Level: ${level}`} />\r\n            </div>\r\n          )}\r\n\r\n          <StartButton callback={startGame} />\r\n        </aside>\r\n      </StyledTetris>\r\n    </StyledTetrisWrapper>\r\n  );\r\n};\r\n\r\nexport default Tetris;\r\n"]},"metadata":{},"sourceType":"module"}