{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\82104\\\\Desktop\\\\school\\\\web_programming\\\\07\\\\05\\\\react-tetris\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"C:\\\\Users\\\\82104\\\\Desktop\\\\school\\\\web_programming\\\\07\\\\05\\\\react-tetris\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState, useCallback } from \"react\";\nimport { randomTetromino, TETROMINOS } from \"../tetrominos\";\nimport { STAGE_WIDTH, checkCollision } from \"../gameHelpers\";\nexport const usePlayer = () => {\n  const _useState = useState({\n    pos: {\n      x: 0,\n      y: 0\n    },\n    tetromino: TETROMINOS[0].shape,\n    collided: false\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        player = _useState2[0],\n        setPlayer = _useState2[1];\n\n  const updatePlayerPos = pos => {\n    const x = pos.x,\n          y = pos.y,\n          collided = pos.collided;\n    setPlayer(prev => _objectSpread({}, prev, {\n      pos: {\n        x: prev.pos.x += x,\n        y: prev.pos.y += y\n      },\n      collided\n    }));\n  };\n\n  function rotate(matrix, dir) {\n    // Make the rows to become cols (transpose)\n    const mtrx = matrix.map((_, index) => matrix.map(column => column[index])); // Reverse each row to get a rotaded matrix\n\n    if (dir > 0) return mtrx.map(row => row.reverse());\n    return mtrx.reverse();\n  }\n\n  function playerRotate(stage, dir) {\n    const clonedPlayer = JSON.parse(JSON.stringify(player));\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\n    const pos = clonedPlayer.pos.x;\n    let offset = 1;\n\n    while (checkCollision(clonedPlayer, stage, {\n      x: 0,\n      y: 0\n    })) {\n      clonedPlayer.pos.x += offset;\n      offset = -(offset + (offset > 0 ? 1 : -1));\n\n      if (offset > clonedPlayer.tetromino[0].length) {\n        rotate(clonedPlayer.tetromino, -dir);\n        clonedPlayer.pos.x = pos;\n        return;\n      }\n    }\n\n    setPlayer(clonedPlayer);\n  }\n\n  const resetPlayer = useCallback(() => {\n    setPlayer({\n      pos: {\n        x: STAGE_WIDTH / 2 - 2,\n        y: 0\n      },\n      tetromino: randomTetromino().shape,\n      collided: false\n    });\n  }, []);\n  return [player, updatePlayerPos, resetPlayer, playerRotate];\n};","map":{"version":3,"sources":["C:/Users/82104/Desktop/school/web_programming/07/05/react-tetris/src/hooks/usePlayer.js"],"names":["useState","useCallback","randomTetromino","TETROMINOS","STAGE_WIDTH","checkCollision","usePlayer","pos","x","y","tetromino","shape","collided","player","setPlayer","updatePlayerPos","prev","rotate","matrix","dir","mtrx","map","_","index","column","row","reverse","playerRotate","stage","clonedPlayer","JSON","parse","stringify","offset","length","resetPlayer"],"mappings":"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","sourcesContent":["import { useState, useCallback } from \"react\";\r\n\r\nimport { randomTetromino, TETROMINOS } from \"../tetrominos\";\r\nimport { STAGE_WIDTH, checkCollision } from \"../gameHelpers\";\r\n\r\nexport const usePlayer = () => {\r\n  const [player, setPlayer] = useState({\r\n    pos: { x: 0, y: 0 },\r\n    tetromino: TETROMINOS[0].shape,\r\n    collided: false\r\n  });\r\n\r\n  const updatePlayerPos = pos => {\r\n    const { x, y, collided } = pos;\r\n    setPlayer(prev => ({\r\n      ...prev,\r\n      pos: { x: (prev.pos.x += x), y: (prev.pos.y += y) },\r\n      collided\r\n    }));\r\n  };\r\n\r\n  function rotate(matrix, dir) {\r\n    // Make the rows to become cols (transpose)\r\n    const mtrx = matrix.map((_, index) => matrix.map(column => column[index]));\r\n    // Reverse each row to get a rotaded matrix\r\n    if (dir > 0) return mtrx.map(row => row.reverse());\r\n    return mtrx.reverse();\r\n  }\r\n\r\n  function playerRotate(stage, dir) {\r\n    const clonedPlayer = JSON.parse(JSON.stringify(player));\r\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\r\n\r\n    const pos = clonedPlayer.pos.x;\r\n    let offset = 1;\r\n    while (checkCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\r\n      clonedPlayer.pos.x += offset;\r\n      offset = -(offset + (offset > 0 ? 1 : -1));\r\n      if (offset > clonedPlayer.tetromino[0].length) {\r\n        rotate(clonedPlayer.tetromino, -dir);\r\n        clonedPlayer.pos.x = pos;\r\n        return;\r\n      }\r\n    }\r\n\r\n    setPlayer(clonedPlayer);\r\n  }\r\n\r\n  const resetPlayer = useCallback(() => {\r\n    setPlayer({\r\n      pos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\r\n      tetromino: randomTetromino().shape,\r\n      collided: false\r\n    });\r\n  }, []);\r\n\r\n  return [player, updatePlayerPos, resetPlayer, playerRotate];\r\n};\r\n"]},"metadata":{},"sourceType":"module"}