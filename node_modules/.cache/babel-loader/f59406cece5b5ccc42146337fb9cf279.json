{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\82104\\\\Desktop\\\\school\\\\web_programming\\\\07\\\\05\\\\react-tetris\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from \"react\";\nimport { createStage } from \"../gameHelpers\";\nexport const useStage = (player, resetPlayer) => {\n  const _useState = useState(createStage()),\n        _useState2 = _slicedToArray(_useState, 2),\n        stage = _useState2[0],\n        setStage = _useState2[1];\n\n  const _useState3 = useState(0),\n        _useState4 = _slicedToArray(_useState3, 2),\n        rowsCleared = _useState4[0],\n        setRowsCleared = _useState4[1];\n\n  useEffect(() => {\n    setRowsCleared(0);\n\n    const sweepRows = newStage => newStage.reduce((ack, row) => {\n      if (row.findIndex(cell => cell[0] === 0) === -1) {\n        setRowsCleared(prev => prev + 1);\n        ack.unshift(new Array(newStage[0].length).fill([0, \"clear\"]));\n        return ack;\n      }\n\n      ack.push(row);\n      return ack;\n    }, []);\n\n    const updateStage = prevStage => {\n      // First flush the stage\n      const newStage = prevStage.map(row => row.map(cell => cell[1] === \"clear\" ? [0, \"clear\"] : cell)); // Then draw the tetromino\n\n      player.tetromino.forEach((row, y) => {\n        row.forEach((val, x) => {\n          if (val !== 0) {\n            newStage[y + player.pos.y][x + player.pos.x] = [val, \"\".concat(player.collided ? \"merged\" : \"clear\")];\n          }\n        });\n      }); // Then check if we collided\n\n      if (player.collided) {\n        resetPlayer();\n        return sweepRows(newStage);\n      }\n\n      return newStage;\n    };\n\n    setStage(prev => updateStage(prev));\n  }, [player, resetPlayer]);\n  return [stage, setStage, rowsCleared];\n};","map":{"version":3,"sources":["C:/Users/82104/Desktop/school/web_programming/07/05/react-tetris/src/hooks/useStage.js"],"names":["useState","useEffect","createStage","useStage","player","resetPlayer","stage","setStage","rowsCleared","setRowsCleared","sweepRows","newStage","reduce","ack","row","findIndex","cell","prev","unshift","Array","length","fill","push","updateStage","prevStage","map","tetromino","forEach","y","val","x","pos","collided"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,WAAT,QAA4B,gBAA5B;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAACC,MAAD,EAASC,WAAT,KAAyB;AAAA,oBACrBL,QAAQ,CAACE,WAAW,EAAZ,CADa;AAAA;AAAA,QACxCI,KADwC;AAAA,QACjCC,QADiC;;AAAA,qBAETP,QAAQ,CAAC,CAAD,CAFC;AAAA;AAAA,QAExCQ,WAFwC;AAAA,QAE3BC,cAF2B;;AAI/CR,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,cAAc,CAAC,CAAD,CAAd;;AAEA,UAAMC,SAAS,GAAGC,QAAQ,IACxBA,QAAQ,CAACC,MAAT,CAAgB,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC5B,UAAIA,GAAG,CAACC,SAAJ,CAAcC,IAAI,IAAIA,IAAI,CAAC,CAAD,CAAJ,KAAY,CAAlC,MAAyC,CAAC,CAA9C,EAAiD;AAC/CP,QAAAA,cAAc,CAACQ,IAAI,IAAIA,IAAI,GAAG,CAAhB,CAAd;AACAJ,QAAAA,GAAG,CAACK,OAAJ,CAAY,IAAIC,KAAJ,CAAUR,QAAQ,CAAC,CAAD,CAAR,CAAYS,MAAtB,EAA8BC,IAA9B,CAAmC,CAAC,CAAD,EAAI,OAAJ,CAAnC,CAAZ;AACA,eAAOR,GAAP;AACD;;AAEDA,MAAAA,GAAG,CAACS,IAAJ,CAASR,GAAT;AACA,aAAOD,GAAP;AACD,KATD,EASG,EATH,CADF;;AAYA,UAAMU,WAAW,GAAGC,SAAS,IAAI;AAC/B;AACA,YAAMb,QAAQ,GAAGa,SAAS,CAACC,GAAV,CAAcX,GAAG,IAChCA,GAAG,CAACW,GAAJ,CAAQT,IAAI,IAAKA,IAAI,CAAC,CAAD,CAAJ,KAAY,OAAZ,GAAsB,CAAC,CAAD,EAAI,OAAJ,CAAtB,GAAqCA,IAAtD,CADe,CAAjB,CAF+B,CAM/B;;AACAZ,MAAAA,MAAM,CAACsB,SAAP,CAAiBC,OAAjB,CAAyB,CAACb,GAAD,EAAMc,CAAN,KAAY;AACnCd,QAAAA,GAAG,CAACa,OAAJ,CAAY,CAACE,GAAD,EAAMC,CAAN,KAAY;AACtB,cAAID,GAAG,KAAK,CAAZ,EAAe;AACblB,YAAAA,QAAQ,CAACiB,CAAC,GAAGxB,MAAM,CAAC2B,GAAP,CAAWH,CAAhB,CAAR,CAA2BE,CAAC,GAAG1B,MAAM,CAAC2B,GAAP,CAAWD,CAA1C,IAA+C,CAC7CD,GAD6C,YAE1CzB,MAAM,CAAC4B,QAAP,GAAkB,QAAlB,GAA6B,OAFa,EAA/C;AAID;AACF,SAPD;AAQD,OATD,EAP+B,CAkB/B;;AACA,UAAI5B,MAAM,CAAC4B,QAAX,EAAqB;AACnB3B,QAAAA,WAAW;AACX,eAAOK,SAAS,CAACC,QAAD,CAAhB;AACD;;AAED,aAAOA,QAAP;AACD,KAzBD;;AA2BAJ,IAAAA,QAAQ,CAACU,IAAI,IAAIM,WAAW,CAACN,IAAD,CAApB,CAAR;AACD,GA3CQ,EA2CN,CAACb,MAAD,EAASC,WAAT,CA3CM,CAAT;AA6CA,SAAO,CAACC,KAAD,EAAQC,QAAR,EAAkBC,WAAlB,CAAP;AACD,CAlDM","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { createStage } from \"../gameHelpers\";\r\n\r\nexport const useStage = (player, resetPlayer) => {\r\n  const [stage, setStage] = useState(createStage());\r\n  const [rowsCleared, setRowsCleared] = useState(0);\r\n\r\n  useEffect(() => {\r\n    setRowsCleared(0);\r\n\r\n    const sweepRows = newStage =>\r\n      newStage.reduce((ack, row) => {\r\n        if (row.findIndex(cell => cell[0] === 0) === -1) {\r\n          setRowsCleared(prev => prev + 1);\r\n          ack.unshift(new Array(newStage[0].length).fill([0, \"clear\"]));\r\n          return ack;\r\n        }\r\n\r\n        ack.push(row);\r\n        return ack;\r\n      }, []);\r\n\r\n    const updateStage = prevStage => {\r\n      // First flush the stage\r\n      const newStage = prevStage.map(row =>\r\n        row.map(cell => (cell[1] === \"clear\" ? [0, \"clear\"] : cell))\r\n      );\r\n\r\n      // Then draw the tetromino\r\n      player.tetromino.forEach((row, y) => {\r\n        row.forEach((val, x) => {\r\n          if (val !== 0) {\r\n            newStage[y + player.pos.y][x + player.pos.x] = [\r\n              val,\r\n              `${player.collided ? \"merged\" : \"clear\"}`\r\n            ];\r\n          }\r\n        });\r\n      });\r\n\r\n      // Then check if we collided\r\n      if (player.collided) {\r\n        resetPlayer();\r\n        return sweepRows(newStage);\r\n      }\r\n\r\n      return newStage;\r\n    };\r\n\r\n    setStage(prev => updateStage(prev));\r\n  }, [player, resetPlayer]);\r\n\r\n  return [stage, setStage, rowsCleared];\r\n};\r\n"]},"metadata":{},"sourceType":"module"}